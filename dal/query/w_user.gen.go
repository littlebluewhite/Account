// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"account/dal/model"
)

func newWUser(db *gorm.DB, opts ...gen.DOOption) wUser {
	_wUser := wUser{}

	_wUser.wUserDo.UseDB(db, opts...)
	_wUser.wUserDo.UseModel(&model.WUser{})

	tableName := _wUser.wUserDo.TableName()
	_wUser.ALL = field.NewAsterisk(tableName)
	_wUser.ID = field.NewInt32(tableName, "id")
	_wUser.UID = field.NewString(tableName, "uid")
	_wUser.Username = field.NewString(tableName, "username")
	_wUser.Password = field.NewString(tableName, "password")
	_wUser.Birthday = field.NewTime(tableName, "birthday")
	_wUser.Email = field.NewString(tableName, "email")
	_wUser.Phone = field.NewString(tableName, "phone")
	_wUser.Country = field.NewString(tableName, "country")
	_wUser.CreatedAt = field.NewTime(tableName, "created_at")
	_wUser.groups = wUserHasManygroups{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("groups", "model.UserGroup"),
	}

	_wUser.workspaces = wUserHasManyworkspaces{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("workspaces", "model.UserWorkspace"),
	}

	_wUser.fillFieldMap()

	return _wUser
}

type wUser struct {
	wUserDo wUserDo

	ALL       field.Asterisk
	ID        field.Int32
	UID       field.String
	Username  field.String
	Password  field.String
	Birthday  field.Time
	Email     field.String
	Phone     field.String
	Country   field.String
	CreatedAt field.Time
	groups    wUserHasManygroups

	workspaces wUserHasManyworkspaces

	fieldMap map[string]field.Expr
}

func (w wUser) Table(newTableName string) *wUser {
	w.wUserDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wUser) As(alias string) *wUser {
	w.wUserDo.DO = *(w.wUserDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wUser) updateTableName(table string) *wUser {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.UID = field.NewString(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Password = field.NewString(table, "password")
	w.Birthday = field.NewTime(table, "birthday")
	w.Email = field.NewString(table, "email")
	w.Phone = field.NewString(table, "phone")
	w.Country = field.NewString(table, "country")
	w.CreatedAt = field.NewTime(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *wUser) WithContext(ctx context.Context) *wUserDo { return w.wUserDo.WithContext(ctx) }

func (w wUser) TableName() string { return w.wUserDo.TableName() }

func (w wUser) Alias() string { return w.wUserDo.Alias() }

func (w wUser) Columns(cols ...field.Expr) gen.Columns { return w.wUserDo.Columns(cols...) }

func (w *wUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wUser) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["password"] = w.Password
	w.fieldMap["birthday"] = w.Birthday
	w.fieldMap["email"] = w.Email
	w.fieldMap["phone"] = w.Phone
	w.fieldMap["country"] = w.Country
	w.fieldMap["created_at"] = w.CreatedAt

}

func (w wUser) clone(db *gorm.DB) wUser {
	w.wUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wUser) replaceDB(db *gorm.DB) wUser {
	w.wUserDo.ReplaceDB(db)
	return w
}

type wUserHasManygroups struct {
	db *gorm.DB

	field.RelationField
}

func (a wUserHasManygroups) Where(conds ...field.Expr) *wUserHasManygroups {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a wUserHasManygroups) WithContext(ctx context.Context) *wUserHasManygroups {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a wUserHasManygroups) Session(session *gorm.Session) *wUserHasManygroups {
	a.db = a.db.Session(session)
	return &a
}

func (a wUserHasManygroups) Model(m *model.WUser) *wUserHasManygroupsTx {
	return &wUserHasManygroupsTx{a.db.Model(m).Association(a.Name())}
}

type wUserHasManygroupsTx struct{ tx *gorm.Association }

func (a wUserHasManygroupsTx) Find() (result []*model.UserGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a wUserHasManygroupsTx) Append(values ...*model.UserGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a wUserHasManygroupsTx) Replace(values ...*model.UserGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a wUserHasManygroupsTx) Delete(values ...*model.UserGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a wUserHasManygroupsTx) Clear() error {
	return a.tx.Clear()
}

func (a wUserHasManygroupsTx) Count() int64 {
	return a.tx.Count()
}

type wUserHasManyworkspaces struct {
	db *gorm.DB

	field.RelationField
}

func (a wUserHasManyworkspaces) Where(conds ...field.Expr) *wUserHasManyworkspaces {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a wUserHasManyworkspaces) WithContext(ctx context.Context) *wUserHasManyworkspaces {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a wUserHasManyworkspaces) Session(session *gorm.Session) *wUserHasManyworkspaces {
	a.db = a.db.Session(session)
	return &a
}

func (a wUserHasManyworkspaces) Model(m *model.WUser) *wUserHasManyworkspacesTx {
	return &wUserHasManyworkspacesTx{a.db.Model(m).Association(a.Name())}
}

type wUserHasManyworkspacesTx struct{ tx *gorm.Association }

func (a wUserHasManyworkspacesTx) Find() (result []*model.UserWorkspace, err error) {
	return result, a.tx.Find(&result)
}

func (a wUserHasManyworkspacesTx) Append(values ...*model.UserWorkspace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a wUserHasManyworkspacesTx) Replace(values ...*model.UserWorkspace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a wUserHasManyworkspacesTx) Delete(values ...*model.UserWorkspace) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a wUserHasManyworkspacesTx) Clear() error {
	return a.tx.Clear()
}

func (a wUserHasManyworkspacesTx) Count() int64 {
	return a.tx.Count()
}

type wUserDo struct{ gen.DO }

func (w wUserDo) Debug() *wUserDo {
	return w.withDO(w.DO.Debug())
}

func (w wUserDo) WithContext(ctx context.Context) *wUserDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wUserDo) ReadDB() *wUserDo {
	return w.Clauses(dbresolver.Read)
}

func (w wUserDo) WriteDB() *wUserDo {
	return w.Clauses(dbresolver.Write)
}

func (w wUserDo) Session(config *gorm.Session) *wUserDo {
	return w.withDO(w.DO.Session(config))
}

func (w wUserDo) Clauses(conds ...clause.Expression) *wUserDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wUserDo) Returning(value interface{}, columns ...string) *wUserDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wUserDo) Not(conds ...gen.Condition) *wUserDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wUserDo) Or(conds ...gen.Condition) *wUserDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wUserDo) Select(conds ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wUserDo) Where(conds ...gen.Condition) *wUserDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wUserDo) Order(conds ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wUserDo) Distinct(cols ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wUserDo) Omit(cols ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wUserDo) Join(table schema.Tabler, on ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wUserDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *wUserDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wUserDo) Group(cols ...field.Expr) *wUserDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wUserDo) Having(conds ...gen.Condition) *wUserDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wUserDo) Limit(limit int) *wUserDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wUserDo) Offset(offset int) *wUserDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wUserDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wUserDo) Unscoped() *wUserDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wUserDo) Create(values ...*model.WUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wUserDo) CreateInBatches(values []*model.WUser, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wUserDo) Save(values ...*model.WUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wUserDo) First() (*model.WUser, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WUser), nil
	}
}

func (w wUserDo) Take() (*model.WUser, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WUser), nil
	}
}

func (w wUserDo) Last() (*model.WUser, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WUser), nil
	}
}

func (w wUserDo) Find() ([]*model.WUser, error) {
	result, err := w.DO.Find()
	return result.([]*model.WUser), err
}

func (w wUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WUser, err error) {
	buf := make([]*model.WUser, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wUserDo) FindInBatches(result *[]*model.WUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wUserDo) Attrs(attrs ...field.AssignExpr) *wUserDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wUserDo) Assign(attrs ...field.AssignExpr) *wUserDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wUserDo) Joins(fields ...field.RelationField) *wUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wUserDo) Preload(fields ...field.RelationField) *wUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wUserDo) FirstOrInit() (*model.WUser, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WUser), nil
	}
}

func (w wUserDo) FirstOrCreate() (*model.WUser, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WUser), nil
	}
}

func (w wUserDo) FindByPage(offset int, limit int) (result []*model.WUser, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wUserDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wUserDo) Delete(models ...*model.WUser) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wUserDo) withDO(do gen.Dao) *wUserDo {
	w.DO = *do.(*gen.DO)
	return w
}
