// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"account/dal/model"
)

func newWGroup(db *gorm.DB, opts ...gen.DOOption) wGroup {
	_wGroup := wGroup{}

	_wGroup.wGroupDo.UseDB(db, opts...)
	_wGroup.wGroupDo.UseModel(&model.WGroup{})

	tableName := _wGroup.wGroupDo.TableName()
	_wGroup.ALL = field.NewAsterisk(tableName)
	_wGroup.ID = field.NewInt32(tableName, "id")
	_wGroup.Name = field.NewString(tableName, "name")
	_wGroup.CreatorID = field.NewInt32(tableName, "creator_id")
	_wGroup.WorkspaceID = field.NewInt32(tableName, "workspace_id")
	_wGroup.Enable = field.NewBool(tableName, "enable")
	_wGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_wGroup.users = wGroupManyToManyusers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("users", "model.WUser"),
		groups: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("users.groups", "model.UserGroup"),
		},
		workspaces: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("users.workspaces", "model.UserWorkspace"),
		},
	}

	_wGroup.fillFieldMap()

	return _wGroup
}

type wGroup struct {
	wGroupDo wGroupDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	CreatorID   field.Int32
	WorkspaceID field.Int32
	Enable      field.Bool
	CreatedAt   field.Time
	users       wGroupManyToManyusers

	fieldMap map[string]field.Expr
}

func (w wGroup) Table(newTableName string) *wGroup {
	w.wGroupDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wGroup) As(alias string) *wGroup {
	w.wGroupDo.DO = *(w.wGroupDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wGroup) updateTableName(table string) *wGroup {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Name = field.NewString(table, "name")
	w.CreatorID = field.NewInt32(table, "creator_id")
	w.WorkspaceID = field.NewInt32(table, "workspace_id")
	w.Enable = field.NewBool(table, "enable")
	w.CreatedAt = field.NewTime(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *wGroup) WithContext(ctx context.Context) *wGroupDo { return w.wGroupDo.WithContext(ctx) }

func (w wGroup) TableName() string { return w.wGroupDo.TableName() }

func (w wGroup) Alias() string { return w.wGroupDo.Alias() }

func (w wGroup) Columns(cols ...field.Expr) gen.Columns { return w.wGroupDo.Columns(cols...) }

func (w *wGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wGroup) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["creator_id"] = w.CreatorID
	w.fieldMap["workspace_id"] = w.WorkspaceID
	w.fieldMap["enable"] = w.Enable
	w.fieldMap["created_at"] = w.CreatedAt

}

func (w wGroup) clone(db *gorm.DB) wGroup {
	w.wGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wGroup) replaceDB(db *gorm.DB) wGroup {
	w.wGroupDo.ReplaceDB(db)
	return w
}

type wGroupManyToManyusers struct {
	db *gorm.DB

	field.RelationField

	groups struct {
		field.RelationField
	}
	workspaces struct {
		field.RelationField
	}
}

func (a wGroupManyToManyusers) Where(conds ...field.Expr) *wGroupManyToManyusers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a wGroupManyToManyusers) WithContext(ctx context.Context) *wGroupManyToManyusers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a wGroupManyToManyusers) Session(session *gorm.Session) *wGroupManyToManyusers {
	a.db = a.db.Session(session)
	return &a
}

func (a wGroupManyToManyusers) Model(m *model.WGroup) *wGroupManyToManyusersTx {
	return &wGroupManyToManyusersTx{a.db.Model(m).Association(a.Name())}
}

type wGroupManyToManyusersTx struct{ tx *gorm.Association }

func (a wGroupManyToManyusersTx) Find() (result []*model.WUser, err error) {
	return result, a.tx.Find(&result)
}

func (a wGroupManyToManyusersTx) Append(values ...*model.WUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a wGroupManyToManyusersTx) Replace(values ...*model.WUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a wGroupManyToManyusersTx) Delete(values ...*model.WUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a wGroupManyToManyusersTx) Clear() error {
	return a.tx.Clear()
}

func (a wGroupManyToManyusersTx) Count() int64 {
	return a.tx.Count()
}

type wGroupDo struct{ gen.DO }

func (w wGroupDo) Debug() *wGroupDo {
	return w.withDO(w.DO.Debug())
}

func (w wGroupDo) WithContext(ctx context.Context) *wGroupDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wGroupDo) ReadDB() *wGroupDo {
	return w.Clauses(dbresolver.Read)
}

func (w wGroupDo) WriteDB() *wGroupDo {
	return w.Clauses(dbresolver.Write)
}

func (w wGroupDo) Session(config *gorm.Session) *wGroupDo {
	return w.withDO(w.DO.Session(config))
}

func (w wGroupDo) Clauses(conds ...clause.Expression) *wGroupDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wGroupDo) Returning(value interface{}, columns ...string) *wGroupDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wGroupDo) Not(conds ...gen.Condition) *wGroupDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wGroupDo) Or(conds ...gen.Condition) *wGroupDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wGroupDo) Select(conds ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wGroupDo) Where(conds ...gen.Condition) *wGroupDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wGroupDo) Order(conds ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wGroupDo) Distinct(cols ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wGroupDo) Omit(cols ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wGroupDo) Join(table schema.Tabler, on ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wGroupDo) Group(cols ...field.Expr) *wGroupDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wGroupDo) Having(conds ...gen.Condition) *wGroupDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wGroupDo) Limit(limit int) *wGroupDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wGroupDo) Offset(offset int) *wGroupDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wGroupDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wGroupDo) Unscoped() *wGroupDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wGroupDo) Create(values ...*model.WGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wGroupDo) CreateInBatches(values []*model.WGroup, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wGroupDo) Save(values ...*model.WGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wGroupDo) First() (*model.WGroup, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WGroup), nil
	}
}

func (w wGroupDo) Take() (*model.WGroup, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WGroup), nil
	}
}

func (w wGroupDo) Last() (*model.WGroup, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WGroup), nil
	}
}

func (w wGroupDo) Find() ([]*model.WGroup, error) {
	result, err := w.DO.Find()
	return result.([]*model.WGroup), err
}

func (w wGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WGroup, err error) {
	buf := make([]*model.WGroup, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wGroupDo) FindInBatches(result *[]*model.WGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wGroupDo) Attrs(attrs ...field.AssignExpr) *wGroupDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wGroupDo) Assign(attrs ...field.AssignExpr) *wGroupDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wGroupDo) Joins(fields ...field.RelationField) *wGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wGroupDo) Preload(fields ...field.RelationField) *wGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wGroupDo) FirstOrInit() (*model.WGroup, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WGroup), nil
	}
}

func (w wGroupDo) FirstOrCreate() (*model.WGroup, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WGroup), nil
	}
}

func (w wGroupDo) FindByPage(offset int, limit int) (result []*model.WGroup, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wGroupDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wGroupDo) Delete(models ...*model.WGroup) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wGroupDo) withDO(do gen.Dao) *wGroupDo {
	w.DO = *do.(*gen.DO)
	return w
}
