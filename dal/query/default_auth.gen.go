// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/littlebluewhite/Account/dal/model"
)

func newDefaultAuth(db *gorm.DB, opts ...gen.DOOption) defaultAuth {
	_defaultAuth := defaultAuth{}

	_defaultAuth.defaultAuthDo.UseDB(db, opts...)
	_defaultAuth.defaultAuthDo.UseModel(&model.DefaultAuth{})

	tableName := _defaultAuth.defaultAuthDo.TableName()
	_defaultAuth.ALL = field.NewAsterisk(tableName)
	_defaultAuth.ID = field.NewInt32(tableName, "id")
	_defaultAuth.Type = field.NewString(tableName, "type")
	_defaultAuth.Auth = field.NewBytes(tableName, "auth")

	_defaultAuth.fillFieldMap()

	return _defaultAuth
}

type defaultAuth struct {
	defaultAuthDo defaultAuthDo

	ALL  field.Asterisk
	ID   field.Int32
	Type field.String
	Auth field.Bytes

	fieldMap map[string]field.Expr
}

func (d defaultAuth) Table(newTableName string) *defaultAuth {
	d.defaultAuthDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d defaultAuth) As(alias string) *defaultAuth {
	d.defaultAuthDo.DO = *(d.defaultAuthDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *defaultAuth) updateTableName(table string) *defaultAuth {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Type = field.NewString(table, "type")
	d.Auth = field.NewBytes(table, "auth")

	d.fillFieldMap()

	return d
}

func (d *defaultAuth) WithContext(ctx context.Context) *defaultAuthDo {
	return d.defaultAuthDo.WithContext(ctx)
}

func (d defaultAuth) TableName() string { return d.defaultAuthDo.TableName() }

func (d defaultAuth) Alias() string { return d.defaultAuthDo.Alias() }

func (d defaultAuth) Columns(cols ...field.Expr) gen.Columns { return d.defaultAuthDo.Columns(cols...) }

func (d *defaultAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *defaultAuth) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["type"] = d.Type
	d.fieldMap["auth"] = d.Auth
}

func (d defaultAuth) clone(db *gorm.DB) defaultAuth {
	d.defaultAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d defaultAuth) replaceDB(db *gorm.DB) defaultAuth {
	d.defaultAuthDo.ReplaceDB(db)
	return d
}

type defaultAuthDo struct{ gen.DO }

func (d defaultAuthDo) Debug() *defaultAuthDo {
	return d.withDO(d.DO.Debug())
}

func (d defaultAuthDo) WithContext(ctx context.Context) *defaultAuthDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d defaultAuthDo) ReadDB() *defaultAuthDo {
	return d.Clauses(dbresolver.Read)
}

func (d defaultAuthDo) WriteDB() *defaultAuthDo {
	return d.Clauses(dbresolver.Write)
}

func (d defaultAuthDo) Session(config *gorm.Session) *defaultAuthDo {
	return d.withDO(d.DO.Session(config))
}

func (d defaultAuthDo) Clauses(conds ...clause.Expression) *defaultAuthDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d defaultAuthDo) Returning(value interface{}, columns ...string) *defaultAuthDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d defaultAuthDo) Not(conds ...gen.Condition) *defaultAuthDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d defaultAuthDo) Or(conds ...gen.Condition) *defaultAuthDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d defaultAuthDo) Select(conds ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d defaultAuthDo) Where(conds ...gen.Condition) *defaultAuthDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d defaultAuthDo) Order(conds ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d defaultAuthDo) Distinct(cols ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d defaultAuthDo) Omit(cols ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d defaultAuthDo) Join(table schema.Tabler, on ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d defaultAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d defaultAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d defaultAuthDo) Group(cols ...field.Expr) *defaultAuthDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d defaultAuthDo) Having(conds ...gen.Condition) *defaultAuthDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d defaultAuthDo) Limit(limit int) *defaultAuthDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d defaultAuthDo) Offset(offset int) *defaultAuthDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d defaultAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *defaultAuthDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d defaultAuthDo) Unscoped() *defaultAuthDo {
	return d.withDO(d.DO.Unscoped())
}

func (d defaultAuthDo) Create(values ...*model.DefaultAuth) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d defaultAuthDo) CreateInBatches(values []*model.DefaultAuth, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d defaultAuthDo) Save(values ...*model.DefaultAuth) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d defaultAuthDo) First() (*model.DefaultAuth, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DefaultAuth), nil
	}
}

func (d defaultAuthDo) Take() (*model.DefaultAuth, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DefaultAuth), nil
	}
}

func (d defaultAuthDo) Last() (*model.DefaultAuth, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DefaultAuth), nil
	}
}

func (d defaultAuthDo) Find() ([]*model.DefaultAuth, error) {
	result, err := d.DO.Find()
	return result.([]*model.DefaultAuth), err
}

func (d defaultAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DefaultAuth, err error) {
	buf := make([]*model.DefaultAuth, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d defaultAuthDo) FindInBatches(result *[]*model.DefaultAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d defaultAuthDo) Attrs(attrs ...field.AssignExpr) *defaultAuthDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d defaultAuthDo) Assign(attrs ...field.AssignExpr) *defaultAuthDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d defaultAuthDo) Joins(fields ...field.RelationField) *defaultAuthDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d defaultAuthDo) Preload(fields ...field.RelationField) *defaultAuthDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d defaultAuthDo) FirstOrInit() (*model.DefaultAuth, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DefaultAuth), nil
	}
}

func (d defaultAuthDo) FirstOrCreate() (*model.DefaultAuth, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DefaultAuth), nil
	}
}

func (d defaultAuthDo) FindByPage(offset int, limit int) (result []*model.DefaultAuth, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d defaultAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d defaultAuthDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d defaultAuthDo) Delete(models ...*model.DefaultAuth) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *defaultAuthDo) withDO(do gen.Dao) *defaultAuthDo {
	d.DO = *do.(*gen.DO)
	return d
}
